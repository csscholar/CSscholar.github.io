class Filter{constructor(e,t,r="year",o="venue_acronym_acronym"){this.years_=e,this.venues_=t,this.yearColumn_=r,this.venueColumn_=o}isValid(e){return this.years_.includes(e[this.yearColumn_])&&this.venues_.includes(e[this.venueColumn_])}}class Dataset{constructor(e){this.data_=e}getUnique(t,e=!0){var r=new Set(this.data_.map(e=>e[t]));return e&&r.delete(""),Array.from(r)}getFilteredData(t){return t?this.data_.filter(e=>t.isValid(e)):this.data_}groupBy(e,t=null){var r,o,s={};for(r of this.data_)t&&!t.isValid(r)||((o=r[e])in s||(s[o]=[]),s[o].push(r));return s}getColumnsByAuthor(e,t=null){var r,o,s=this.groupBy("authors_name",t),n=this.getUniqueCoAuthors(t);for([r,o]of Object.entries(s)){for(var a of o)0!=+a.referenceCount?a.selfCitationPercent=a.authors_selfCitations/+a.referenceCount*100:a.selfCitationPercent=0;s[r]=convertArrayToObjectOfLists(o),s[r].coAuthors=n[r],getColumnSubset(s[r],e)}return s}getUniqueCoAuthors(e=null){var t,r,o,e=this.groupBy("doi",e),s={};for(t of Object.values(e))for(var n of t){var a,u=n.authors_name;u in s||(s[u]=new Set);for(a of t)a.authors_name!=u&&s[u].add(a.authors_name)}for([r,o]of Object.entries(s))s[r]=o.size;return s}}function getColumnSubset(e,t){for(var r of Object.keys(e))t.includes(r)||delete e[r]}function convertArrayToObjectOfLists(e){const r={};return e.forEach(t=>{Object.keys(t).forEach(e=>{void 0===r[e]?r[e]=[t[e]]:r[e].push(t[e])})}),r}export{Dataset,Filter};