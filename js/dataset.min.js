class Filter{constructor(e,t,r="year",s="venue_acronym"){this.years_=e,this.venues_=t,this.yearColumn_=r,this.venueColumn_=s}isValid(e){return this.years_.includes(e[this.yearColumn_])&&this.venues_.includes(e[this.venueColumn_])}}class Dataset{constructor(e){this.data_=e}getUnique(t,e=!0){var r=new Set(this.data_.map(e=>e[t]));return e&&r.delete(""),Array.from(r)}getFilteredData(t){return t?this.data_.filter(e=>t.isValid(e)):this.data_}groupBy(e,t=null){var r,s,o={};for(r of this.data_)t&&!t.isValid(r)||((s=r[e])in o||(o[s]=[]),o[s].push(r));return o}getVenuesByArea(e=null){var t,r,s=this.groupBy("area",e);for([t,r]of Object.entries(s))s[t]=new Set(r.map(e=>e.venue_acronym));return s}getColumnsByAuthor(e,t=null){var r,s,o=this.groupBy("authors_name",t),a=this.getUniqueCoAuthors(t);for([r,s]of Object.entries(o))o[r]=convertArrayToObjectOfLists(s),o[r].coAuthors=a[r],getColumnSubset(o[r],e);return o}getUniqueCoAuthors(e=null){var t,r,s,e=this.groupBy("doi",e),o={};for(t of Object.values(e))for(var a of t){var n,u=a.authors_name;u in o||(o[u]=new Set);for(n of t)n.authors_name!=u&&o[u].add(n.authors_name)}for([r,s]of Object.entries(o))o[r]=s.size;return o}}function getColumnSubset(e,t){for(var r of Object.keys(e))t.includes(r)||delete e[r]}function convertArrayToObjectOfLists(e){const r={};return e.forEach(t=>{Object.keys(t).forEach(e=>{void 0===r[e]?r[e]=[t[e]]:r[e].push(t[e])})}),r}export{Dataset,Filter};