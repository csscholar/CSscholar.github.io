class Filter{constructor(e,t,r="year",s="venue_acronym"){this.years_=e,this.venues_=t,this.yearColumn_=r,this.venueColumn_=s}isValid(e){return this.years_.includes(e[this.yearColumn_])&&this.venues_.includes(e[this.venueColumn_])}}class Dataset{constructor(e){this.data_=e}getUnique(t,e=!0){var r=new Set(this.data_.map(e=>e[t]));return e&&r.delete(""),Array.from(r)}getFilteredData(t){return t?this.data_.filter(e=>t.isValid(e)):this.data_}getColumnsByAuthor(e,t=null){var r,s={};for(r of this.getFilteredData(t))for(const i of r.authors){var n,a=i.name;if(a in s||(s[a]=Object.fromEntries(e.map(e=>[e,[]])),e.includes("coAuthors")&&(s[a].coAuthors=new Set)),r.selfCitations=+i.selfCitations||0,"referenceCount"in r&&0<+r.referenceCount?r.selfCitationPercent=r.selfCitations/+r.referenceCount*100:r.selfCitationPercent=0,e.includes("coAuthors"))for(var o of r.authors)o.name!=a&&s[a].coAuthors.add(o.name);for(n of e)"coAuthors"!==n&&s[a][n].push(r[n])}return s}}export{Dataset,Filter};